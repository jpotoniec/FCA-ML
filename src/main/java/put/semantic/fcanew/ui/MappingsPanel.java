/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 *//*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package put.semantic.fcanew.ui;

import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JFileChooser;
import javax.swing.JTextArea;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import put.semantic.fcanew.Attribute;
import put.semantic.fcanew.Mappings;

abstract class DocumentListenerHelper implements DocumentListener {

    protected abstract void update(String text);

    @Override
    public void insertUpdate(DocumentEvent e) {
        try {
            update(e.getDocument().getText(0, e.getDocument().getLength()));
        } catch (BadLocationException ex) {
            Logger.getLogger(DocumentListenerHelper.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        try {
            update(e.getDocument().getText(0, e.getDocument().getLength()));
        } catch (BadLocationException ex) {
            Logger.getLogger(DocumentListenerHelper.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        try {
            update(e.getDocument().getText(0, e.getDocument().getLength()));
        } catch (BadLocationException ex) {
            Logger.getLogger(DocumentListenerHelper.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}

public class MappingsPanel extends javax.swing.JPanel {

    private MappingsImpl mappings = new MappingsImpl();
    private JFileChooser fileChooser = null;

    public Mappings getMappings() {
        return mappings;
    }

    /**
     * Creates new form MappingsPanel
     */
    public MappingsPanel() {
        initComponents();
        fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter(
                "XML", "xml"));
        fileChooser.setMultiSelectionEnabled(true);
        prefixes.getDocument().addDocumentListener(new DocumentListenerHelper() {

            @Override
            protected void update(String text) {
                mappings.setPrefixes(text);
            }
        });
        endpoint.getDocument().addDocumentListener(new DocumentListenerHelper() {

            @Override
            protected void update(String text) {
                mappings.setEndpoint(text);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        endpoint = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        prefixes = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        patterns = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();
        load = new javax.swing.JButton();
        save = new javax.swing.JButton();

        jLabel1.setText("Endpoint:");

        endpoint.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                endpointPropertyChange(evt);
            }
        });

        jLabel2.setText("Prefixes:");

        prefixes.setColumns(20);
        prefixes.setRows(5);
        jScrollPane1.setViewportView(prefixes);

        patterns.setModel(mappings.getTableModel());
        jScrollPane2.setViewportView(patterns);

        jToolBar1.setRollover(true);

        load.setText("Load");
        load.setFocusable(false);
        load.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        load.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });
        jToolBar1.add(load);

        save.setText("Save");
        save.setFocusable(false);
        save.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        save.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        jToolBar1.add(save);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 825, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(endpoint)
                            .addComponent(jScrollPane1))))
                .addContainerGap())
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(endpoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2)
                .addGap(31, 31, 31))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            mappings.load(fileChooser.getSelectedFile());
            endpoint.setText(mappings.getEndpoint());
            prefixes.setText(mappings.getPrefixes());
        }
    }//GEN-LAST:event_loadActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            mappings.save(fileChooser.getSelectedFile());
        }
    }//GEN-LAST:event_saveActionPerformed

    private void endpointPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_endpointPropertyChange
        if ("text".equals(evt.getPropertyName())) {
            mappings.setEndpoint(evt.getNewValue().toString());
        }
    }//GEN-LAST:event_endpointPropertyChange

    public void updateAttributes(List<? extends Attribute> attributes) {
        mappings.updateAttributes(attributes);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField endpoint;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton load;
    private javax.swing.JTable patterns;
    private javax.swing.JTextArea prefixes;
    private javax.swing.JButton save;
    // End of variables declaration//GEN-END:variables
}
